import { TestBed } from '@angular/core/testing';
import { ResultsDataService } from './results-data.service ';
import { HttpClient } from '@angular/common/http';
import { of } from 'rxjs';
import { Firestore } from '@angular/fire/firestore';
import { Storage } from '@angular/fire/storage';
import { eventA, resultsa } from "app/test/testdata.spec";
import { Results } from './model';

describe("ResultsDataService", () => {

   let service: ResultsDataService;
   let httpClientSpy: { get: jasmine.Spy; };
   let firestoreSpy: jasmine.SpyObj<Firestore>;
   let storageSpy: jasmine.SpyObj<Storage>;


   beforeEach(() => {
      httpClientSpy = { get: jasmine.createSpy() };
      firestoreSpy = jasmine.createSpyObj('Firestore', ['doc', 'collection']);
      storageSpy = jasmine.createSpyObj('Storage', ['ref']);


      TestBed.configureTestingModule({
         providers: [
            ResultsDataService,
            { provide: HttpClient, useValue: httpClientSpy },
            { provide: Firestore, useValue: firestoreSpy },
            { provide: Storage, useValue: storageSpy },
         ],
      });
      service = TestBed.inject(ResultsDataService);
   });

   it('should be created', () => {
      expect(service).toBeTruthy();
   });

   it("should load results for an event", (done: DoneFn) => {
      spyOn(service, "downloadResultsFile").and.returnValue(of("Sample CSV data"));
      spyOn(service, "parseSplits").and.returnValue(resultsa);
      spyOn(service, "computeRanks");

      service.loadResults(eventA).subscribe(results => {
         expect(results.classes.length).toEqual(4);
         expect(results.allCompetitors.length).toEqual(7);
         expect(service.computeRanks).toHaveBeenCalled();
         done();
      });
   });


   it('should set and load results for an event', (done: DoneFn) => {
      spyOn(service, 'loadResults').and.returnValue(of(resultsa));
      service.setSelectedEvent(eventA).subscribe(results => {
         expect(results).toEqual(resultsa);
         done();
      });
   });

   it('should handle null event in setSelectedEvent', () => {
      expect(() => service.setSelectedEvent(null)).toThrowError('ResultsSelection: Event not specified');
   });


   it('should download results file', (done: DoneFn) => {
      const mockStorageRef = {} as any;
      const mockDownloadUrl = 'mockUrl';

      storageSpy.ref.and.returnValue(mockStorageRef);
      const getDownloadURLSpy = jasmine.createSpy().and.resolveTo(mockDownloadUrl);
      spyOn(service as any, 'getDownloadURL').and.returnValue(getDownloadURLSpy());

      httpClientSpy.get.and.returnValue(of("Dummy results"));

      service.downloadResultsFile(eventA).subscribe(
         results => {
            expect(results).toBe("Dummy results");
            expect(httpClientSpy.get).toHaveBeenCalledWith(mockDownloadUrl, { responseType: 'text' });
            done();
         }
      );
   });



   it('should compute ranks', () => {
      const results = new Results();
      results.classes = [{
         name: 'Class A',
         competitors: [
            { time: 100, status: "OK" },
            { time: 110, status: "OK" },
            { time: 90, status: "OK" },
         ]
      }] as any;

      spyOn(service, 'computeCompetitorRanks');

      service.computeRanks(results as any);

      expect(service.computeCompetitorRanks).toHaveBeenCalled();
   });


   it('should compute competitor ranks', () => {

      const competitors = [
         { time: 100, status: 'OK', splitTimes: [], cumTimes: [], setSplitAndCumulativeRanks: jasmine.createSpy() },
         { time: 110, status: 'OK', splitTimes: [], cumTimes: [], setSplitAndCumulativeRanks: jasmine.createSpy() },
         { time: 90, status: 'OK', splitTimes: [], cumTimes: [], setSplitAndCumulativeRanks: jasmine.createSpy() },
      ] as any;

      service.computeCompetitorRanks(competitors, 5);

      expect(competitors[0].setSplitAndCumulativeRanks).toHaveBeenCalled();
      expect(competitors[1].setSplitAndCumulativeRanks).toHaveBeenCalled();
      expect(competitors[2].setSplitAndCumulativeRanks).toHaveBeenCalled();

   });

   it('should get ranks', () => {
      const data = [100, 110, 90, 100, null];
      const ranks = service.getRanks(data);
      expect(ranks).toEqual([2, 3, 1, 2, null]);
   });


   it('should parse splits', () => {
      const rawData = "Event,1\nClass,A\n1,David,100\n2,Ryder,110";
      const results = service.parseSplits(rawData);
      expect(results.name).toBe('1');
      expect(results.classes.length).toBe(1);
   });

});
