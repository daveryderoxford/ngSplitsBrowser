import { TestBed } from '@angular/core/testing';
import { ResultsSelectionService } from './results-selection.service';
import { ResultsDataService } from './results-data.service ';
import { of } from 'rxjs';
import { resultsa, courseA, courseB, classA, classB, classC, classD, david, ryder } from 'app/test/testdata.spec';
import { signal } from '@angular/core';


describe('ResultsSelectionService', () => {
  let service: ResultsSelectionService;
  let mockResultsDataService: jasmine.SpyObj<ResultsDataService>;

  beforeEach(() => {

    mockResultsDataService = jasmine.createSpyObj<ResultsDataService>('ResultsDataService', ['results$']);
    mockResultsDataService.results$ = of(resultsa);

    TestBed.configureTestingModule({
      providers: [
        ResultsSelectionService,
        { provide: ResultsDataService, useValue: mockResultsDataService },
      ]
    });
    service = TestBed.inject(ResultsSelectionService);

  });

  it('should be created', () => {
    expect(service).toBeTruthy();
  });

  it('should initialize with first class selected', () => {
    expect(service.oclass()).toEqual(classA);
    expect(service.displayedCompetitors()).toEqual(classA.competitors);

  });

  it('should select competitors', () => {
    service.selectCompetitors(david, ryder);
    expect(service.competitors()).toEqual([david, ryder]);
  });


  it('should deselect competitors', () => {
    service.selectCompetitors(david, ryder);
    service.deselectCompetitors(david);

    expect(service.competitors()).toEqual([ryder]);
  });

  it('should clear competitors', () => {
    service.selectCompetitors(david, ryder);
    service.clearCompetitors();
    expect(service.competitors()).toEqual([]);
  });

  it('should toggle competitor selection', () => {
    service.toggleCompetitor(david);
    expect(service.isCompetitorSelected(david)).toBeTrue();
    service.toggleCompetitor(david);
    expect(service.isCompetitorSelected(david)).toBeFalse();
  });

  it('should select control', () => {
    service.selectControl('101');
    expect(service.control()).toEqual('101');
  });


  it('should select course', () => {
    service.selectCourse(courseA);
    expect(service.course()).toBe(courseA);
    expect(service.control()).toBeNull(); // Ensure control reset on course change
  });



  it('should select class', () => {
    service.selectClass(classB);

    expect(service.course()).toEqual(courseA);
    expect(service.oclass()).toEqual(classB);
    expect(service.control()).toBeNull();
  });

  it('should set course or class', () => {
    service.setCourseOrClass(true); // Show course
    expect(service.courseOrClass()).toBeTrue();
    service.setCourseOrClass(false); // Show class
    expect(service.courseOrClass()).toBeFalse();
  });

  it('should update displayedCompetitors based on courseOrClass', () => {

    service.selectClass(classA);
    service.setCourseOrClass(true); // Showing Course A
    expect(service.displayedCompetitors()).toEqual(courseA.competitors);

    service.setCourseOrClass(false); // Showing classA
    expect(service.displayedCompetitors()).toEqual(classA.competitors);
  });

  it('should update selectedCompetitors based on courseOrClass', () => {

    service.selectCompetitors(david, ryder);

    service.setCourseOrClass(true); // Showing course
    expect(service.selectedCompetitors()).toEqual([david, ryder]);

    service.setCourseOrClass(false); // Showing Class
    expect(service.selectedCompetitors()).toEqual([david]);

  });

  it('should handle no classes in results', () => {
    const emptyResults = { ...resultsa, classes: [] };
    mockResultsDataService.results$ = of(emptyResults);

    service = new ResultsSelectionService(mockResultsDataService as any);
    expect(service.oclass()).toBeNull();
    expect(service.course()).toBeNull();

  });

});