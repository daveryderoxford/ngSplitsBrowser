import 'jasmine-expect';
import { eventA, resultsa } from "app/test/testdata.spec";
import { of, zip } from "rxjs";
import { ResultsSelectionService } from "./results-selection.service";
import { TestBed } from '@angular/core/testing';
import { Firestore } from '@angular/fire/firestore';
import { ResultsDataService } from './results-data.service ';
import { HttpClient } from '@angular/common/http';
import { Storage } from '@angular/fire/storage';


describe('ResultsSelectionService', () => {
   let service: ResultsSelectionService;
   let resultsDataServiceSpy: jasmine.SpyObj<ResultsDataService>;

   beforeEach(() => {
      resultsDataServiceSpy = jasmine.createSpyObj('ResultsDataService', ['results$']);

      TestBed.configureTestingModule({
         providers: [
            ResultsSelectionService,
            { provide: ResultsDataService, useValue: resultsDataServiceSpy },
            { provide: HttpClient, useValue: {} }, // You might need to mock HttpClient if used directly
            { provide: Storage, useValue: {} },    // Mock Storage as it's injected
            { provide: Firestore, useValue: {} }    //  Mock Firestore as its injected
         ],
      });

      service = TestBed.inject(ResultsSelectionService);
   });

   it('should be created', () => {
      expect(service).toBeTruthy();
   });


   it('should initialize with empty selections', () => {
      expect(service.competitors()).toEqual([]);
      expect(service.control()).toBeNull();
      expect(service.course()).toBeNull();
      expect(service.oclass()).toBeNull();
      expect(service.courseOrClass()).toBeFalse(); // Check the initial value
   });

   it('should update competitors, course, and class when results are loaded', (done: DoneFn) => {
      const mockResults = { ...resultsa, classes: resultsa.classes.map(c => ({ ...c })) }; // Deep copy for mutation safety

      resultsDataServiceSpy.results$.and.returnValue(of(mockResults));

      // Use zip to combine observables and assert values after all have emitted
      zip(
         service.competitors,
         service.course,
         service.oclass
      ).subscribe(([competitors, course, oclass]) => {
         expect(competitors).toEqual([]); // Should be empty initially
         expect(course).toEqual(mockResults.classes[0].course);
         expect(oclass).toEqual(mockResults.classes[0]);
         done();
      });
   });


   it('should select and deselect competitors', () => {
      const competitor1 = { name: 'Competitor 1' } as Competitor;
      const competitor2 = { name: 'Competitor 2' } as Competitor;

      service.selectCompetitors(competitor1);
      expect(service.competitors()).toEqual([competitor1]);
      expect(service.isCompetitorSelected(competitor1)).toBeTrue();

      service.selectCompetitors(competitor2);
      expect(service.competitors()).toEqual([competitor1, competitor2]);  // Order doesn't matter here, as selection is simply checking if competitor is present in the array

      service.deselectCompetitors(competitor1);
      expect(service.competitors()).toEqual([competitor2]);
      expect(service.isCompetitorSelected(competitor1)).toBeFalse();

      service.clearCompetitors();
      expect(service.competitors()).toEqual([]);
   });

   it('should toggle competitor selection', () => {
      const competitor1 = { name: 'Competitor 1' } as Competitor;

      service.toggleCompetitor(competitor1);
      expect(service.isCompetitorSelected(competitor1)).toBeTrue();

      service.toggleCompetitor(competitor1);
      expect(service.isCompetitorSelected(competitor1)).toBeFalse();
   });


   it('should select control', () => {
      service.selectControl('1');
      expect(service.control()).toEqual('1');
   });


   it('should select course and reset control', () => {
      const course1 = { name: 'Course 1' } as Course;
      const course2 = { name: 'Course 2' } as Course;

      service.selectCourse(course1);
      expect(service.course()).toBe(course1);

      service.selectControl('21'); // select a control

      service.selectCourse(course2);
      expect(service.course()).toBe(course2);
      expect(service.control()).toBeNull();  // control should be reset.
   });

   it('should select class and course', () => {
      const course1 = { name: 'Course 1' } as Course;
      const courseClass1 = { name: 'Class 1', course: course1 } as CourseClass;

      service.selectClass(courseClass1);
      expect(service.course()).toEqual(course1);
      expect(service.oclass()).toEqual(courseClass1);
   });

   it('should set courseOrClass', () => {
      service.setCourseOrClass(true);
      expect(service.courseOrClass()).toBeTrue();

      service.setCourseOrClass(false);
      expect(service.courseOrClass()).toBeFalse();
   });

   it('should calculate selectedCompetitors based on courseOrClass and course/class selection', () => {
      const course1 = { name: 'Course 1' } as Course;
      const class1 = { name: 'Class 1', course: course1 } as CourseClass;
      const competitor1 = { name: 'Competitor 1', courseClass: class1 } as Competitor;
      const competitor2 = { name: 'Competitor 2', courseClass: class1 } as Competitor;
      const competitor3 = { name: 'Competitor 3', courseClass: { name: 'Class 2', course: course1 } as CourseClass } as Competitor;


      resultsDataServiceSpy.results$.and.returnValue(of({ ...resultsa, competitors: [competitor1, competitor2, competitor3] }));

      service.selectCompetitors(competitor1, competitor2, competitor3);
      service.selectClass(class1);

      // class selection mode
      service.setCourseOrClass(false);
      expect(service.selectedCompetitors()).toEqual([competitor1, competitor2]);

      // Course selection mode
      service.setCourseOrClass(true);
      expect(service.selectedCompetitors()).toEqual([competitor1, competitor2, competitor3]);
   });


   it('should calculate displayedCompetitors based on courseOrClass and course/class selection', () => {
      const course1 = { name: 'Course 1', competitors: [{ name: 'c1' }, { name: 'c2' }] } as unknown as Course;
      const class1 = { name: 'Class 1', course: course1, competitors: [{ name: 'c3' }, { name: 'c4' }] } as unknown as CourseClass;

      resultsDataServiceSpy.results$.and.returnValue(of({ ...resultsa, classes: [class1] })); // Provide classes
      service.selectClass(class1);

      // Course/Class selection mode.  Note that the course competitors are used not the classes
      service.setCourseOrClass(true);
      expect(service.displayedCompetitors()).toEqual(course1.competitors);

      // Class selection mode
      service.setCourseOrClass(false);
      expect(service.displayedCompetitors()).toEqual(class1.competitors);
   });


});

Rate this answer: 
Context Sources(21)
Generate unit tests;

import { TestBed } from '@angular/core/testing';
import { computed, inject, signal } from '@angular/core';
import { Competitor, Course, CourseClass } from "./model";
import { ResultsDataService } from './results-data.service ';
import { ResultsSelectionService } from './results-selection.service';
import { of } from 'rxjs';
import { Results } from './model/results';


describe('ResultsSelectionService', () => {
   let service: ResultsSelectionService;
   let resultsDataServiceSpy: jasmine.SpyObj<ResultsDataService>;

   const course1 = { name: 'Course 1', competitors: [{ name: 'c1' }, { name: 'c2' }] } as unknown as Course;
   const class1 = { name: 'Class 1', course: course1, competitors: [{ name: 'c3' }, { name: 'c4' }] } as unknown as CourseClass;


   beforeEach(() => {
      resultsDataServiceSpy = jasmine.createSpyObj('ResultsDataService', ['results$']);

      TestBed.configureTestingModule({
         providers: [
            ResultsSelectionService,
            { provide: ResultsDataService, useValue: resultsDataServiceSpy },
         ]
      });
      service = TestBed.inject(ResultsSelectionService);
   });


   it('should be created', () => {
      expect(service).toBeTruthy();
   });


   it('should initialize with empty selections', () => {
      expect(service.competitors()).toEqual([]);
      expect(service.control()).toBeNull();
      expect(service.course()).toBeNull();
      expect(service.oclass()).toBeNull();
      expect(service.courseOrClass()).toBeFalse();
   });



   it('should update course and class when results are loaded', () => {

      const mockResults: Results = { classes: [class1], allCompetitors: [] };

      resultsDataServiceSpy.results$.and.returnValue(of(mockResults));  // Return observable

      service.course.subscribe(course => {
         expect(course).toEqual(class1.course);
      });

      service.oclass.subscribe(oclass => {
         expect(oclass).toEqual(class1);
      });


   });


   it('should handle no initial classes in results', () => {

      const mockResults: Results = { classes: [], allCompetitors: [] };
      resultsDataServiceSpy.results$.and.returnValue(of(mockResults));  // Return observable

      service.course.subscribe(course => {
         expect(course).toEqual(null);
      });

      service.oclass.subscribe(oclass => {
         expect(oclass).toEqual(null);
      });

   });




   it('should select and deselect competitors', () => {
      const competitor1 = { name: 'Competitor 1', courseClass: class1 } as Competitor;
      const competitor2 = { name: 'Competitor 2', courseClass: class1 } as Competitor;

      service.selectCompetitors(competitor1);
      expect(service.competitors()).toEqual([competitor1]);
      expect(service.isCompetitorSelected(competitor1)).toBeTrue();

      service.selectCompetitors(competitor2);
      expect(service.competitors()).toEqual([competitor1, competitor2]);

      service.deselectCompetitors(competitor1);
      expect(service.competitors()).toEqual([competitor2]);
      expect(service.isCompetitorSelected(competitor1)).toBeFalse();

      service.clearCompetitors();
      expect(service.competitors()).toEqual([]);
   });

   it('should toggle competitor selection', () => {
      const competitor1 = { name: 'Competitor 1', courseClass: class1 } as Competitor;

      service.toggleCompetitor(competitor1);
      expect(service.isCompetitorSelected(competitor1)).toBeTrue();

      service.toggleCompetitor(competitor1);
      expect(service.isCompetitorSelected(competitor1)).toBeFalse();
   });


   it('should select control', () => {
      service.selectControl('1');
      expect(service.control()).toEqual('1');
   });


   it('should select course and reset control', () => {
      const course2 = { name: 'Course 2', competitors: [] } as unknown as Course;

      service.selectCourse(course1);
      expect(service.course()).toBe(course1);

      service.selectControl('21');

      service.selectCourse(course2);
      expect(service.course()).toBe(course2);
      expect(service.control()).toBeNull();
   });

   it('should select class and course', () => {

      service.selectClass(class1);
      expect(service.course()).toEqual(course1);
      expect(service.oclass()).toEqual(class1);
   });

   it('should set courseOrClass', () => {
      service.setCourseOrClass(true);
      expect(service.courseOrClass()).toBeTrue();

      service.setCourseOrClass(false);
      expect(service.courseOrClass()).toBeFalse();
   });

   it('should calculate selectedCompetitors based on courseOrClass and course/class selection', () => {
      const competitor1 = { name: 'Competitor 1', courseClass: class1 } as Competitor;
      const competitor2 = { name: 'Competitor 2', courseClass: class1 } as Competitor;
      const competitor3 = { name: 'Competitor 3', courseClass: { name: 'Class 2', course: course1 } as CourseClass } as Competitor;
      const mockResults: Results = { classes: [class1], allCompetitors: [competitor1, competitor2, competitor3] };

      resultsDataServiceSpy.results$.and.returnValue(of(mockResults));
      service.selectCompetitors(competitor1, competitor2, competitor3);
      service.selectClass(class1);

      service.setCourseOrClass(false);
      expect(service.selectedCompetitors()).toEqual([competitor1, competitor2]);

      service.setCourseOrClass(true);
      expect(service.selectedCompetitors()).toEqual([competitor1, competitor2, competitor3]);
   });


   it('should calculate displayedCompetitors based on courseOrClass and course/class selection', () => {
      resultsDataServiceSpy.results$.and.returnValue(of({ classes: [class1], allCompetitors: [] }));

      service.selectClass(class1);

      service.setCourseOrClass(true);
      expect(service.displayedCompetitors()).toEqual(course1.competitors);

      service.setCourseOrClass(false);
      expect(service.displayedCompetitors()).toEqual(class1.competitors);
   });


});


Rate this answer: 
Context Sources(21)
Generate unit tests;

import { TestBed } from '@angular/core/testing';
import { ResultsDataService } from './results-data.service ';
import { of } from 'rxjs';
import { Results } from './model/results';
import { OEvent } from 'app/events/model/oevent';
import { Competitor } from './model';
import { Firestore, provideFirestore } from '@angular/fire/firestore';
import { getFirestore } from 'firebase/firestore';  // Import the correct function
import { Storage, provideStorage } from '@angular/fire/storage';
import { getStorage } from 'firebase/storage';
import { HttpClient } from '@angular/common/http';
import { provideHttpClient } from '@angular/common/http';



describe('ResultsDataService', () => {
   let service: ResultsDataService;


   beforeEach(() => {

      TestBed.configureTestingModule({
         providers: [
            ResultsDataService,
            provideFirestore(() => getFirestore()),  // Correct Firestore import
            provideStorage(() => getStorage()),      // Correct Storage import
            provideHttpClient()
         ]
      });
      service = TestBed.inject(ResultsDataService);

   });

   it('should be created', () => {
      expect(service).toBeTruthy();
   });




   it('should load and process results', (done: DoneFn) => {
      const mockEvent = {} as OEvent;
      const mockResults: Results = {
         courses: [], classes: [], allCompetitors: [],
         needsRepair: () => false  // Ensure no repair is attempted
      };

      spyOn(service, 'downloadResultsFile').and.returnValue(of('mock-splits-data')); // Mock download
      spyOn(service, 'parseSplits').and.returnValue(mockResults);

      service.loadResults(mockEvent).subscribe(results => {
         expect(results).toBe(mockResults);
         done();
      });
   });



   it('should set selected event and load results', () => {

      const mockEvent = { key: 'event1' } as OEvent;
      const mockResults: Results = {
         courses: [], classes: [], allCompetitors: [], needsRepair: () => false
      };

      spyOn(service, 'loadResults').and.returnValue(of(mockResults));

      service.setSelectedEvent(mockEvent).subscribe(results => {
         expect(results).toBe(mockResults);
         expect(service.event()).toBe(mockEvent);
         expect(service.results()).toBe(mockResults);
      });
   });

   it('should not reload results if same event is selected again', () => {
      const mockEvent = { key: 'event1' } as OEvent;
      const mockResults: Results = { courses: [], classes: [], allCompetitors: [], needsRepair: () => false };
      service['_event$'].next(mockEvent); // Set initial event
      service['_results$'].next(mockResults);

      spyOn(service, 'loadResults');

      service.setSelectedEvent(mockEvent).subscribe(results => {
         expect(results).toBe(mockResults);
         expect(service.loadResults).not.toHaveBeenCalled();
      });
   });


   it('should compute ranks correctly', () => {
      const results: Results = {
         courses: [],
         classes: [
            {
               name: 'Class A', numControls: 3, competitors: [
                  { totalTime: 100, setSplitAndCumulativeRanks: (a, b) => { } } as unknown as Competitor,
                  { totalTime: 150, setSplitAndCumulativeRanks: (a, b) => { } } as unknown as Competitor,
                  { totalTime: 200, setSplitAndCumulativeRanks: (a, b) => { } } as unknown as Competitor
               ]
            }
         ],
         allCompetitors: []
      };
      spyOn(results.classes[0].competitors[0], 'setSplitAndCumulativeRanks');
      spyOn(results.classes[0].competitors[1], 'setSplitAndCumulativeRanks');
      spyOn(results.classes[0].competitors[2], 'setSplitAndCumulativeRanks');
      service['computeRanks'](results);

      expect(results.classes[0].competitors[0].setSplitAndCumulativeRanks).toHaveBeenCalled();
   });


   it('should get ranks correctly', () => {
      const data = [10, 20, null, 10, 30];
      const ranks = service['getRanks'](data);
      expect(ranks).toEqual([1, 2, null, 1, 3]); // Ties handled, nulls preserved
   });

   it('should get ranks correctly with NaN', () => {
      const data = [10, 20, NaN, 10, 30];
      const ranks = service['getRanks'](data);
      expect(ranks).toEqual([1, 2, NaN, 1, 3]); // Ties handled, NaN preserved
   });


});
