import { TestBed } from '@angular/core/testing';
import { ResultsDataService } from './results-data.service ';
import { of } from 'rxjs';
import { Results } from './model/results';
import { OEvent } from 'app/events/model/oevent';
import { Competitor } from './model';
import { Firestore, provideFirestore } from '@angular/fire/firestore';
import { getFirestore } from 'firebase/firestore';  // Import the correct function
import { Storage, provideStorage } from '@angular/fire/storage';
import { getStorage } from 'firebase/storage';
import { HttpClient } from '@angular/common/http';
import { provideHttpClient } from '@angular/common/http';



describe('ResultsDataService', () => {
   let service: ResultsDataService;


   beforeEach(() => {

      TestBed.configureTestingModule({
         providers: [
            ResultsDataService,
            provideFirestore(() => getFirestore()),  // Correct Firestore import
            provideStorage(() => getStorage()),      // Correct Storage import
            provideHttpClient()
         ]
      });
      service = TestBed.inject(ResultsDataService);

   });

   it('should be created', () => {
      expect(service).toBeTruthy();
   });




   it('should load and process results', (done: DoneFn) => {
      const mockEvent = {} as OEvent;
      const mockResults: Results = {
         courses: [], classes: [], allCompetitors: [],
         needsRepair: () => false  // Ensure no repair is attempted
      };

      spyOn(service, 'downloadResultsFile').and.returnValue(of('mock-splits-data')); // Mock download
      spyOn(service, 'parseSplits').and.returnValue(mockResults);

      service.loadResults(mockEvent).subscribe(results => {
         expect(results).toBe(mockResults);
         done();
      });
   });



   it('should set selected event and load results', () => {

      const mockEvent = { key: 'event1' } as OEvent;
      const mockResults: Results = {
         courses: [], classes: [], allCompetitors: [], needsRepair: () => false
      };

      spyOn(service, 'loadResults').and.returnValue(of(mockResults));

      service.setSelectedEvent(mockEvent).subscribe(results => {
         expect(results).toBe(mockResults);
         expect(service.event()).toBe(mockEvent);
         expect(service.results()).toBe(mockResults);
      });
   });

   it('should not reload results if same event is selected again', () => {
      const mockEvent = { key: 'event1' } as OEvent;
      const mockResults: Results = { courses: [], classes: [], allCompetitors: [], needsRepair: () => false };
      service['_event$'].next(mockEvent); // Set initial event
      service['_results$'].next(mockResults);

      spyOn(service, 'loadResults');

      service.setSelectedEvent(mockEvent).subscribe(results => {
         expect(results).toBe(mockResults);
         expect(service.loadResults).not.toHaveBeenCalled();
      });
   });


   it('should compute ranks correctly', () => {
      const results: Results = {
         courses: [],
         classes: [
            {
               name: 'Class A', numControls: 3, competitors: [
                  { totalTime: 100, setSplitAndCumulativeRanks: (a, b) => { } } as unknown as Competitor,
                  { totalTime: 150, setSplitAndCumulativeRanks: (a, b) => { } } as unknown as Competitor,
                  { totalTime: 200, setSplitAndCumulativeRanks: (a, b) => { } } as unknown as Competitor
               ]
            }
         ],
         allCompetitors: []
      };
      spyOn(results.classes[0].competitors[0], 'setSplitAndCumulativeRanks');
      spyOn(results.classes[0].competitors[1], 'setSplitAndCumulativeRanks');
      spyOn(results.classes[0].competitors[2], 'setSplitAndCumulativeRanks');
      service['computeRanks'](results);

      expect(results.classes[0].competitors[0].setSplitAndCumulativeRanks).toHaveBeenCalled();
   });


   it('should get ranks correctly', () => {
      const data = [10, 20, null, 10, 30];
      const ranks = service['getRanks'](data);
      expect(ranks).toEqual([1, 2, null, 1, 3]); // Ties handled, nulls preserved
   });

   it('should get ranks correctly with NaN', () => {
      const data = [10, 20, NaN, 10, 30];
      const ranks = service['getRanks'](data);
      expect(ranks).toEqual([1, 2, NaN, 1, 3]); // Ties handled, NaN preserved
   });


});