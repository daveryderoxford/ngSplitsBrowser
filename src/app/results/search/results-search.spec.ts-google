import { ComponentFixture, TestBed } from '@angular/core/testing';
import { ResultsSearch } from './results-search.';
import { ReactiveFormsModule, FormControl } from '@angular/forms';
import { MatAutocompleteModule, MatAutocompleteSelectedEvent } from '@angular/material/autocomplete';
import { of } from 'rxjs';
import { ResultsDataService } from '../results-data.service ';
import { ResultsSelectionService } from '../results-selection.service';
import { Competitor, Course, CourseClass, Results } from '../model';
import { resultsa, courseA, courseB, classA, classB, john, mary } from 'app/test/testdata.spec';
import { By } from '@angular/platform-browser';


describe('ResultsSearch', () => {
  let component: ResultsSearch;
  let fixture: ComponentFixture<ResultsSearch>;
  let mockResultsDataService: any;
  let mockResultsSelectionService: any;

  beforeEach(async () => {

    mockResultsDataService = jasmine.createSpyObj<ResultsDataService>('ResultsDataService', ['results']);
    mockResultsDataService.results = jasmine.createSpy().and.returnValue(resultsa);
    mockResultsDataService.results$ = of(resultsa);

    mockResultsSelectionService = jasmine.createSpyObj<ResultsSelectionService>('ResultsSelectionService', ['selectCompetitors', 'selectClass', 'selectCourse']);

    await TestBed.configureTestingModule({
      imports: [MatAutocompleteModule, ReactiveFormsModule],
      declarations: [ResultsSearch],
      providers: [
        { provide: ResultsDataService, useValue: mockResultsDataService },
        { provide: ResultsSelectionService, useValue: mockResultsSelectionService }
      ]
    })
      .compileComponents();

    fixture = TestBed.createComponent(ResultsSearch);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });


  it('should update search panel contents', () => {
    component.updateSearchPanelContents('Jo');

    expect(component.filterPanelContents.length).toBe(3);

    component.updateSearchPanelContents('');
    expect(component.filterPanelContents.length).toBe(3);


    component.updateSearchPanelContents(john);
    expect(component.filterPanelContents.length).toBe(3);
  });



  it('should update selections when competitor selected', () => {

    component.updateSelections(john);

    expect(mockResultsSelectionService.selectCompetitors).toHaveBeenCalledWith(john);
    expect(mockResultsSelectionService.selectClass).toHaveBeenCalledWith(classA);
    expect(mockResultsSelectionService.selectCourse).toHaveBeenCalledWith(courseA);

  });

  it('should update selections when class selected', () => {
    component.updateSelections(classA);
    expect(mockResultsSelectionService.selectClass).toHaveBeenCalledWith(classA);
    expect(mockResultsSelectionService.selectCourse).toHaveBeenCalledWith(courseA);
  });

  it('should update selections when course selected', () => {

    component.updateSelections(courseA);
    expect(mockResultsSelectionService.selectCourse).toHaveBeenCalledWith(courseA);
    expect(mockResultsSelectionService.selectClass).toHaveBeenCalledWith(classA);


    const emptyCourse = new Course('Empty Course', [], []);
    component.updateSelections(emptyCourse);
    expect(mockResultsSelectionService.selectCourse).toHaveBeenCalledWith(emptyCourse);
    expect(mockResultsSelectionService.selectClass).not.toHaveBeenCalledWith(classA);  // or any class since emptyCourse has none
  });



  it('should handle option selected', () => {
    const event = { option: { value: john } } as MatAutocompleteSelectedEvent;
    component.onOptionSelected(event);
    expect(mockResultsSelectionService.selectCompetitors).toHaveBeenCalledWith(john);
    expect(component.searchControl.value).toBe('');
  });


  it('should reset search', () => {

    component.searchControl.setValue("Test");
    component._resetSearch();
    expect(component.searchControl.value).toBe('');

  });

  it('should display name', () => {

    expect(component.displayFn(john)).toBe('John Smith');
    expect(component.displayFn(null)).toBeUndefined();
  });

  it('should toggle isExpanded and call _delayDropdown', () => {
    spyOn<any>(component, '_delayDropdown');

    // Case 1: Not expanded, no event (should do nothing)
    component._isExpanded = false;
    component.toggleIsExpanded();
    expect(component['_delayDropdown']).not.toHaveBeenCalled();
    expect(component._isExpanded).toBe(false);

    // Case 2: Expanded, no event (should call _delayDropdown(true))
    component._isExpanded = true;
    component.toggleIsExpanded();
    expect(component['_delayDropdown']).toHaveBeenCalledOnceWith(true);
    expect(component._isExpanded).toBe(false);

    // Case 3: Expanded, event from option select (should do nothing)
    component._isExpanded = true;
    component.toggleIsExpanded({ tagName: 'MD-OPTION' });
    expect(component['_delayDropdown']).toHaveBeenCalledTimes(1);  // No additional call
    expect(component._isExpanded).toBe(true);  // Stays expanded

    // Case 4: Expanded, click on random element (should call _delayDropdown(true) and flip _isExpanded))
    component._isExpanded = true;
    component.toggleIsExpanded({ tagName: 'DIV' });
    expect(component['_delayDropdown']).toHaveBeenCalledWith(true);
    expect(component._isExpanded).toBe(false);

    // Case 5: Not expanded, click to focus (should call _delayDropdown(false) and flip _isExpanded)
    component._isExpanded = false;
    component.toggleIsExpanded({ tagName: 'INPUT' });
    expect(component['_delayDropdown']).toHaveBeenCalledWith(false);
    expect(component._isExpanded).toBe(true);
  });

  it('should delay dropdown opening and closing', () => {
    spyOn(component['_autocompleteTrigger'], 'closePanel').and.callThrough();
    spyOn(component['_autocompleteTrigger'], 'openPanel').and.callThrough();

    component._delayDropdown(true); // Closing
    expect(component['_autocompleteTrigger'].closePanel).toHaveBeenCalled();
    expect(component['_autocompleteTrigger'].openPanel).not.toHaveBeenCalled();

    jasmine.clock().tick(211);
    expect(component['_autocompleteTrigger'].openPanel).not.toHaveBeenCalled();

    component._delayDropdown(false); // Opening
    expect(component['_autocompleteTrigger'].closePanel).toHaveBeenCalledTimes(2); // Called again before opening

    jasmine.clock().tick(211);
    expect(component['_autocompleteTrigger'].openPanel).toHaveBeenCalled();
  });



});